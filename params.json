{"name":"Cobaye","tagline":"ncurse based test framework","body":"# COBAYE - Simple test framework\r\n## author: Tristan Lelong tristan.lelong@blunderer.org\r\n\r\nTesting is an important task, but can be quite tedious. Having a test framework\r\nto rely on can be useful and helps to focus on test efficency.\r\nCobaye is a test framework with a ncurses based interface that can run thru a \r\ntelnet / serial connection. It also offers a batch mode to run automatic test \r\nsequences.\r\n\r\nThe test API is extremely simple: write your test in the 'tests' directory.\r\nThe tests must be declared using macro cobaye_declare_test with the \r\nstruct cobaye_test that describe your test:\r\n\r\n    struct cobaye_test my_test = {\r\n    \t.name = \"mytest\",\r\n    \t.descr = \"a simple test description\",\r\n    \t.main = my_test_main,\r\n    \t.flags = TST_NO_USER,\r\n    };\r\n    \r\n    cobaye_declare_test(my_test);\r\n\r\nThen, the build system will automatically compile and embed your test case.\r\n\r\nAt run time the test framework, will generate a list of all compiled tests and when\r\nrunning a test, it will fork to run the test.\r\n\r\ncobaye features are:\r\n* cobaye_printf to display logs\r\n* cobaye_scanf to prompt user for input\r\n* resources embedded as blob\r\n* report generation\r\n* batch mode (for auto tests only)\r\n* build flags customization for tests\r\n* out of tree build\r\n* handling of test sequences\r\n\r\nFor more info, check out the dummy.c test example.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}